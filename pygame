#!/usr/bin/env python3
"""

= OS X:

  brew install python3 hg sdl sdl_image sdl_mixer sdl_ttf portmidi
  pip3 install hg+http://bitbucket.org/pygame/pygame
  pip3 install pillow

= Debian 8:

There is no python3-pygame package, but we can build our own.  I used this
pygame:

    http://www.pygame.org/ftp/pygame-1.9.1release.tar.gz

I needed these dependencies:

    $ sudo apt-get install python3-dev libsdl1.2-dev libsdl-image1.2-dev libsdl-ttf2.0-dev

More are potentially needed:

    http://stackoverflow.com/questions/7652385/where-can-i-find-and-install-the-dependencies-for-pygame

The installation should then be easy.  pygame camera support is currently
disabled in python3 onwards, which is good because it won't compile anyway as
Debian 8 is missing a <linux/video.h> header.

    $ mkdir -p /opt/pygame/src
    $ cd /opt/pygame/src
    $ hg clone https://bitbucket.org/pygame/pygame
    $ cd pygame
    $ python3 setup.py install --prefix=/opt/pygame

...but that failed to run, complaining about a missing object:

    $ PYTHONPATH=/opt/pygame/lib/python3.4/site-packages ./pygame
    Traceback (most recent call last):
      File "./pygame", line 41, in <module>
        import pygame
      File "/opt/pygame/lib/python3.4/site-packages/pygame/__init__.py", line 95, in <module>
        from pygame.base import *
    ImportError: /opt/pygame/lib/python3.4/site-packages/pygame/base.cpython-34m.so: undefined symbol: PyCObject_Check

Clone the hg repo, and build from there instead!

It all works!!!

    $ sudo env PYTHONPATH=/opt/pygame/lib/python3.4/site-packages ./pygame

If you have Eurostile, make sure it is in one of:

    * /usr/share/fonts
    * /usr/local/share/fonts
    * ~/.fonts

"""

import optparse
import os
import pygame
import queue
import random
import signal
import sqlite3
import subprocess
import sys
import tempfile
import threading
import time


class Data_Time():
    def __init__(self, speed=1, start=None):
        self.real_start = time.time()
        if start is None:
            self.fake_start = self.real_start
        else:
            self.fake_start = start
        self.speed = speed

    def time(self):
        dur = time.time() - self.real_start
        return(self.fake_start + (self.speed * dur))


class Data_Temperatures():
    def time(self):
        pass

    def fetch_new(self):
        pass


class Data_Temperatures_SQLite(Data_Temperatures):
    def __init__(self, clock, db_path):
        self.clock = clock
        self.db_path = db_path
        self.con = sqlite3.connect(db_path)
        yesterday = clock.time() - 86400
        self.food_mtime = yesterday
        self.oven_mtime = yesterday

    def fetch_new(self):
        now = self.clock.time()
        new_food = self._read(2, self.food_mtime, now)
        new_oven = self._read(1, self.oven_mtime, now)
        has_new_data = False
        if len(new_food) > 0:
            has_new_data = True
            self.food_mtime = new_food[-1][0]
        if len(new_oven) > 0:
            has_new_data = True
            self.oven_mtime = new_oven[-1][0]
        if has_new_data:
            return(now, new_food, new_oven)
        else:
            return None

    def _read(self, sensor, time_from, time_to):
        sql = (
            'SELECT epoch, mC/1000.0 FROM sensor_{} '
            'WHERE epoch > {} AND epoch <= {} '
            'AND mC > -300000 '
            'ORDER BY epoch ASC'
        ).format(sensor, time_from, time_to)
        cur = self.con.cursor()
        cur.execute(sql)
        res = cur.fetchall()
        cur.close()
        return res


class Data_Temperatures_Mock(Data_Temperatures):
    UPDATE_INTERVAL = 10
    SPEED_UP = 60

    def __init__(self, clock):
        self.clock = clock
        self.epoch = clock.time()
        self.t0 = self.epoch

    def fetch_new(self):
        t1 = self.clock.time()
        dt = t1 - self.t0
        if dt < self.UPDATE_INTERVAL:
            return None
        food, oven = [], []
        while self.t0 < (t1 - self.UPDATE_INTERVAL):
            self.t0 += self.UPDATE_INTERVAL
            oven_t = 175.0
            food_t = 20 + (50/3600 * (self.t0 - self.epoch))
            food.append((self.t0, food_t))
            oven.append((self.t0, oven_t))
        return(self.t0, food, oven)


class Data_Buffer():
    MAX_GAP = 3600

    def __init__(self, data_source):
        self.data_source = data_source
        self.food = []
        self.oven = []

    def fetch(self):
        new = self.data_source.fetch_new()
        if new is None: 
            return None
        (now, food, oven) = new
        self._add(self.food, food)
        self._add(self.oven, oven)
        return(now, self.food, self.oven)

    def _add(self, ar0, ar1):
        for pair1 in ar1:
            if len(ar0) > 0:
                time0 = ar0[-1][0]
                time1 = pair1[0]
                if time1 - time0 > self.MAX_GAP:
                    ar0.clear()
            ar0.append(pair1)


class R_Plotter():
    SCRIPT = """

        Targets <- c(
            55,     # beef muscle, rare
            65,     # poultry, rare
            75,     # poultry, done
            85      # beef tissue, done
        )

        Model_Window_Size <- 300
        Done_Future_Cutoff <- 2 * 3600

        args <- commandArgs(trailingOnly = TRUE)

        now         <- as.numeric(args[1])
        food        <- read.table(args[2], header=TRUE)
        oven        <- read.table(args[3], header=TRUE)
        png_path    <-            args[4]
        width       <- as.numeric(args[5])
        height      <- as.numeric(args[6])

        png(
            png_path,
            width=width,
            height=height,
            units="px"
        )

        par(
            cex=(width / 640),  # 1920 px wide => cex=3.0
            family="mono",
            col.lab='white',
            col.axis='white',
            fg='white',
            bg='black',
            mar=c(
                2.0,    # bottom
                2.0,    # left
                0.5,    # top
                0.5     # right
            )
        )

        epoch <- min(c(food$time, oven$time))
        now_t <- now - epoch

        food$time <- food$time - epoch
        oven$time <- oven$time - epoch

        recent <- food[food$time > (now_t - Model_Window_Size),]

        if (nrow(recent) >= 3) {
            model <- lm(recent$temperature ~ recent$time)
            a <- model$coefficients[[2]]
            b <- model$coefficients[[1]]
            done <- data.frame(
              temperature=Targets,
              time=(Targets - b) / a  # (T = at + b) so (t = (T - b)/a)
            )
            done <- done[done$time > 0,]
            done <- done[done$time >= now_t,]
            done <- done[done$time < (now_t + Done_Future_Cutoff),]
        }

        temperature_range <- range(c(
            0,
            150,
            food$temperature,
            oven$temperature,
            done$temperature
        ))

        time_max <- max(c(
            0,
            300,
            food$time,
            oven$time,
            done$time  # TODO quantize to avoid xlim jitter as model improves
        ))

        plot(
            food$temperature ~ food$time,
            type="l",
            xlab='',
            ylab='',
            xlim=c(0, time_max),
            ylim=temperature_range,
            lwd=4,
            xaxt='n',
        )

        time_axis_units <- 60 * c(1, 5, 10, 15, 30)
        time_axis_by <- time_axis_units[time_max / time_axis_units <= 12][1]
        if (is.na(time_axis_by)) {
            # e.g. 40 hours cook => tick every 4 hours
            time_axis_by <- 3600 * ceiling((time_max / 12) / 3600)
        }
        time_axis_at <- seq(from=0, to=time_max, by=time_axis_by)
        time_axis_labels <- lapply(time_axis_at, function(t) {
            mm <- floor((t / 60) %% 60)
            hh <- floor(t / 3600)
            if (hh == 0) {
                return(sprintf('%dm', mm))
            } else {
                if (time_axis_by >= 3600) {
                    return(sprintf('%dh', hh))
                } else {
                    return(sprintf('%dh%02dm', hh, mm))
                }
            }
        })
        axis(1, at=time_axis_at, labels=time_axis_labels)

        points(
            oven$temperature ~ oven$time,
            type="l",
            lwd=4,
        )

        for (target in Targets) {
            abline(target, 0, lt=3, col=8)
            label <- paste(target, "\u00B0C", sep="")
            text(0, target, label, pos=4, col='gray')
        }

        if (exists("model")) {
            abline(model, lt=2, col='yellow')
        }

        if (exists("done") && nrow(done) > 0) {
            invisible(apply(done, 1, function(row) {
                target <- row[[1]]
                time   <- row[[2]]
                abline(v=time, lt=3, col=8)
                label <- strftime(
                    as.POSIXct(
                        epoch + time,
                        origin="1970-01-01"
                    ),
                    '%H:%M'
                )
                text(time, target, label, pos=2)
                points(time, target, type="p", lwd=4, col="red")
            }))
        }

        graphics.off()

    """

    def __init__(self, size):
        self.size = size
        self.food_table = self._tf('food', 'table')
        self.oven_table = self._tf('oven', 'table')

        self.r_script = scr = self._tf('script', 'R')
        scr.write(self.SCRIPT.encode('utf-8'))
        scr.flush()

    def _tf(self, prefix, suffix):
        return tempfile.NamedTemporaryFile(
            prefix=('bluetherm-plotter-' + prefix + '.'),
            suffix=('.' + suffix)
        )

    def plot(self, now, food_data, oven_data):
        self._write_data(self.food_table.name, food_data)
        self._write_data(self.oven_table.name, oven_data)
        png = self._tf('plot', 'png')
        (width, height) = self.size
        command = [
            'Rscript',
            self.r_script.name,
            now,
            self.food_table.name,
            self.oven_table.name,
            png.name,
            width,
            height,
        ]
        command = [str(c) for c in command]
        try:
            subprocess.check_call(command, timeout=5)
            return png
        except subprocess.CalledProcessError as ex:
            # The actual error will show up on STDERR
            return None

    def _write_data(self, path, data):
        f = open(path, 'w')
        f.write("time temperature\n")
        for row in data:
            f.write(' '.join([str(x) for x in row]))
            f.write("\n")
        f.close()


class Game_Color():
    black = (0x00, 0x00, 0x00)
    gray  = (0x80, 0x80, 0x80)
    white = (0xff, 0xff, 0xff)


class Game_Sprite_WallClock(pygame.sprite.DirtySprite):
    def __init__(self, time_fn, font, format='%Y.%m.%d %H:%M:%S'):
        pygame.sprite.DirtySprite.__init__(self)

        self.time_fn = time_fn
        self.font = font
        self.format = format
        self.last = None

        dummy = self._text(time.strftime(format))
        self.image = pygame.Surface(dummy.get_rect().size)
        self.rect = self.image.get_rect()

    def update(self):
        now = self.time_fn()
        if now == self.last:
            return
        self.last = now
        text = self._text(time.strftime(self.format, time.localtime(now)))
        self.image.fill(Game_Color.black)
        self.image.blit(text, (0, 0))
        self.dirty = 1

    def _text(self, clock_string):
        return self.font.render(clock_string, 1, Game_Color.gray)


class Game_Sprite_TemperatureReading(pygame.sprite.DirtySprite):
    LABEL_MARGIN_RIGHT = 12
    UNSET = -300.0
    RATE = 20

    def __init__(self, font, label):
        pygame.sprite.DirtySprite.__init__(self)

        self.font = font
        self.label = label
        self.label_text = self.font.render(label, 1, Game_Color.gray)
        self.label_width = self.label_text.get_rect().width

        self.t0 = None
        self.t1 = None
        self.pp = 100
        self.is_first = True

        dummy_value_text = self._build_value_text(999.0, Game_Color.white)
        height = font.get_linesize() # Approx. ascent + descent + 1
        width = (
            self.label_width +
            dummy_value_text.get_rect().width +
            self.LABEL_MARGIN_RIGHT
        )

        self.image = pygame.Surface((width, height))
        self.rect = self.image.get_rect()
        self.set(None)

    def set(self, t):
        if self.t1 != t:
            self.t0 = self.t1
            self.t1 = t
            self.pp = 0

    def update(self):
        if self.is_first:
            self.is_first = False
        elif self.pp == 100:
            return

        self.image.fill(Game_Color.black)
        self.image.blit(self.label_text, (0, 0))

        self.pp = min(100, self.pp + self.RATE)
        if self.pp < 50:
            v = 100 - (2 * self.pp)
            t = self.t0
        else:
            v = (2 * self.pp) - 100
            t = self.t1
        color = [0xff * (v/100.0) for _ in range(3)]
        value_text = self._build_value_text(t, color)
        value_rect = value_text.get_rect()
        value_rect.left = self.label_width + self.LABEL_MARGIN_RIGHT
        self.image.blit(value_text, value_rect)
        self.dirty = 1

    def _build_value_text(self, t, color):
        if t is None:
            return self.font.render('.....', 1, color)
        else:
            t_str = str(round(float(t), 1)) + "\u00B0C"
            return self.font.render(t_str, 1, color)


class Game_Sprite_CountdownBar(pygame.sprite.DirtySprite):
    # TODO this should use the fake clock, not the pygame clock, and it should
    # also try to give you information about time since last reading seen
    #
    # For example see the log starting 2015-11-06 17:50
    TIMEOUT = 10000 # ms

    def __init__(self, size):
        pygame.sprite.DirtySprite.__init__(self)
        self.image = pygame.Surface(size)
        self.rect = self.image.get_rect()
        self.reset()

    def reset(self):
        self.image.fill(Game_Color.gray)
        self.start_ms = pygame.time.get_ticks()
        self.last_dur_ms = None

    def update(self):
        dur_ms = pygame.time.get_ticks() - self.start_ms
        dur_ms = 100 * (dur_ms // 100)
        if dur_ms == self.last_dur_ms:
            return
        self.last_dur_ms = dur_ms
        if dur_ms <= self.TIMEOUT:
            w = self.rect.width
            bar = pygame.Rect(
                w - (w * dur_ms // self.TIMEOUT),
                0,
                w,
                self.rect.height
            )
            self.image.fill(Game_Color.black, bar)
            self.dirty = 1


class Game_Sprite_PlotPane(pygame.sprite.DirtySprite):
    def __init__(self, size):
        pygame.sprite.DirtySprite.__init__(self)
        self.image = pygame.Surface(size)
        self.rect = self.image.get_rect()

    def load(self, png_path):
        plot_image = pygame.image.load(png_path)
        self.image.blit(plot_image, (0, 0))
        self.dirty = 1


class Game_PlotWorker(threading.Thread):
    PLOTREADY = pygame.USEREVENT + 1

    def __init__(self, plotter):
        threading.Thread.__init__(self)
        self.plotter = plotter
        self.q = queue.Queue()

    def run(self):
        self.running = True
        while self.running:
            now = None
            while not self.q.empty():
                (now, food_data, oven_data) = self.q.get()
            if now is None:
                continue
            if len(food_data) + len(oven_data) == 0:
                continue
            png_tempfile = self.plotter.plot(now, food_data, oven_data)
            if png_tempfile is None:
                continue
            event = pygame.event.Event(
                self.PLOTREADY,
                png_tempfile=png_tempfile,  # pass to avoid garbage collection
                png_path=png_tempfile.name,
                now=now,
                food_data=food_data,
                oven_data=oven_data,
            )
            pygame.event.post(event)


parser = optparse.OptionParser()

parser.add_option(
    '--test',
    action='store_true',
    help="test mode, running with a mock data source",
)

parser.add_option(
    '--sqlite',
    type='string',
    default='/var/lib/bluethermd/sqlite',
    help="path to your bluetherm daemon's sqlite database",
)

parser.add_option(
    '--start',
    type='string',
    default=None,
    help="fake clock time, when re-playing data",
)

parser.add_option(
    '--speedup',
    type='int',
    default=1,
    help="fake clock speed, when re-playing data",
)

(options, args) = parser.parse_args()

clock_start = None
if options.start:
    try:
        struct = time.strptime(options.start, '%Y-%m-%dT%H:%M:%S')
        clock_start = time.mktime(struct)
    except ValueError as ex:
        parser.error(ex)
clock = Data_Time(options.speedup, clock_start)

if options.test:
    data_source = Data_Temperatures_Mock(clock)
else:
    if not os.path.exists(options.sqlite):
        parser.error('sqlite database not found: ' + options.sqlite)
    data_source = Data_Temperatures_SQLite(clock, options.sqlite)

data_buffer = Data_Buffer(data_source)


pygame.init()
pygame.display.init()

info = pygame.display.Info()
g_width, g_height = info.current_w, info.current_h

if sys.platform == 'darwin':
    scale = 0.95
    g_width  = int(scale * g_width)
    g_height = int(scale * g_height)

g_font_size = int(g_width / 36)

size = (g_width, g_height)

pygame.mouse.set_visible(False)

game_clock = pygame.time.Clock()

print('setting mode to {}...'.format(size))
screen = pygame.display.set_mode(size)
print('mode is set')

background = pygame.Surface(screen.get_size())
background = background.convert()
background.fill(Game_Color.black)

# The FreeType parts of pygame have better kerning, but have a bug whereby the
# baseline has jitter.
font = pygame.font.SysFont('Eurostile', g_font_size)

wall_clock = Game_Sprite_WallClock(clock.time, font)
wall_clock.rect.topleft = (10, 10)

food_temperature = Game_Sprite_TemperatureReading(font, 'food')
food_temperature.rect.top = 10
food_temperature.rect.right = g_width - 10

oven_temperature = Game_Sprite_TemperatureReading(font, 'oven')
oven_temperature.rect.top = 10
oven_temperature.rect.right = food_temperature.rect.left - 50

countdown_bar = Game_Sprite_CountdownBar((g_width, 3))
countdown_bar.rect.topleft = (0, wall_clock.rect.bottom + 10)

plot_pane = Game_Sprite_PlotPane((
    g_width - (10 * 2),
    g_height - countdown_bar.rect.bottom - 20
))
plot_pane.rect.top = countdown_bar.rect.bottom + 10
plot_pane.rect.left = 10

plotter = R_Plotter((plot_pane.rect.width, plot_pane.rect.height))

allsprites = pygame.sprite.LayeredDirty((
    wall_clock,
    food_temperature,
    oven_temperature,
    countdown_bar,
    plot_pane,
))
allsprites.clear(screen, background)

pw = Game_PlotWorker(plotter)
pw.start()

def quit():
    print('quitting...')
    pw.running = False
    pw.join()
    #pygame.quit()
    sys.exit()

def signal_handler(signal, frame):
    quit()

for sig in [signal.SIGINT, signal.SIGTERM]:
    signal.signal(sig, signal_handler)

is_run = True
while is_run:
    game_clock.tick(30)

    new = data_buffer.fetch()
    if new:
        # Defer updating food_temperature and oven_temperature until the
        # plot_pane is redrawn -- an expensive operation that makes makes
        # animations jerky!
        pw.q.put(new)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            quit()
        elif event.type == Game_PlotWorker.PLOTREADY:
            plot_pane.load(event.png_path)
            if len(event.food_data) > 0:
                food_t = event.food_data[-1][1]
                food_temperature.set(food_t)
            if len(event.oven_data) > 0:
                oven_t = event.oven_data[-1][1]
                oven_temperature.set(oven_t)
            countdown_bar.reset()
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                quit()

    allsprites.update()
    rects = allsprites.draw(screen)
    pygame.display.update(rects)

