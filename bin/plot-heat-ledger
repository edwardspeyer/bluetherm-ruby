#!/usr/bin/env python3

import base64
import glob
import io
import optparse
import os
import queue
import random
import signal
import sqlite3
import subprocess
import sys
import tempfile
import threading
import time

pygame_paths = glob.glob('/opt/pygame/lib/*/site-packages')
if pygame_paths:
    sys.path.extend(pygame_paths)

import pygame


class Data_Time():
    def __init__(self, speed=1, start=None):
        self.real_start = time.time()
        if start is None:
            self.fake_start = self.real_start
        else:
            self.fake_start = start
        self.speed = speed

    def set_start(self, start_time):
        self.fake_start = float(start_time)

    def time(self):
        dur = time.time() - self.real_start
        return(self.fake_start + (self.speed * dur))


class Data_Temperatures():
    def time(self):
        pass

    def fetch_new(self):
        pass


class Data_Temperatures_SQLite(Data_Temperatures):
    def __init__(self, clock, db_path):
        self.clock = clock
        self.db_path = db_path
        self.con = sqlite3.connect(db_path)
        self.food_mtime = None
        self.oven_mtime = None

    def fetch_new(self):
        if self.food_mtime is None:
            yesterday = clock.time() - 86400
            self.food_mtime = yesterday
            self.oven_mtime = yesterday
        now = self.clock.time()
        new_food = self._read(2, self.food_mtime, now)
        new_oven = self._read(1, self.oven_mtime, now)
        has_new_data = False
        if len(new_food) > 0:
            has_new_data = True
            self.food_mtime = new_food[-1][0]
        if len(new_oven) > 0:
            has_new_data = True
            self.oven_mtime = new_oven[-1][0]
        if has_new_data:
            return(now, new_food, new_oven)
        else:
            return None

    def data_start_time(self):
        def start_of(sensor):
            template = 'SELECT epoch FROM sensor_{} ORDER BY epoch ASC LIMIT 1'
            cur = self.con.cursor()
            cur.execute(template.format(sensor))
            res = cur.fetchone()
            cur.close()
            if res is None:
                return None
            return res[0]
        times = [v for v in [start_of(1), start_of(2)] if v]
        if len(times) == 0:
            raise "no data found!"
        return min(times)

    def _read(self, sensor, time_from, time_to):
        sql = (
            'SELECT epoch, mC/1000.0 FROM sensor_{} '
            'WHERE epoch > {} AND epoch <= {} '
            'AND mC > -300000 '
            'ORDER BY epoch ASC'
        ).format(sensor, time_from, time_to)
        cur = self.con.cursor()
        cur.execute(sql)
        res = cur.fetchall()
        cur.close()
        return res


class Data_Temperatures_Mock(Data_Temperatures):
    UPDATE_INTERVAL = 10
    SPEED_UP = 60

    def __init__(self, clock):
        self.clock = clock
        self.epoch = clock.time()
        self.t0 = self.epoch

    def fetch_new(self):
        t1 = self.clock.time()
        dt = t1 - self.t0
        if dt < self.UPDATE_INTERVAL:
            return None
        food, oven = [], []
        while self.t0 < (t1 - self.UPDATE_INTERVAL):
            self.t0 += self.UPDATE_INTERVAL
            oven_t = 175.0
            food_t = 20 + (50/3600 * (self.t0 - self.epoch))
            food.append((self.t0, food_t))
            oven.append((self.t0, oven_t))
        return(self.t0, food, oven)


class Data_Buffer():
    MAX_GAP = 3600

    def __init__(self, data_source):
        self.data_source = data_source
        self.food = []
        self.oven = []

    def fetch(self):
        new = self.data_source.fetch_new()
        if new is None:
            return None
        (now, food, oven) = new
        self.food.extend(food)
        self.oven.extend(oven)
        times = [p[0] for p in (self.food + self.oven)]
        if len(times) > 1:
            times.sort()
            time0 = start = min(times)
            for time1 in times[1:]:
                if time1 - time0 > self.MAX_GAP:
                    start = time1
                time0 = time1
            self.food = [p for p in self.food if p[0] >= start]
            self.oven = [p for p in self.oven if p[0] >= start]
        return(now, self.food, self.oven)

    def _add(self, ar0, ar1):
        for pair1 in ar1:
            if len(ar0) > 0:
                time0 = ar0[-1][0]
                time1 = pair1[0]
                if time1 - time0 > self.MAX_GAP:
                    ar0.clear()
            ar0.append(pair1)


class R_Plotter():
    SCRIPT = """

        Targets <- c(
            55,     # beef muscle, rare
            65,     # poultry, rare
            75,     # poultry, done
            85      # beef tissue, done
        )

        Model_Window_Size <- 300
        Done_Future_Cutoff <- 3 * 3600

        args <- commandArgs(trailingOnly = TRUE)

        now         <- as.numeric(args[1])
        food        <- read.table(args[2], header=TRUE)
        oven        <- read.table(args[3], header=TRUE)
        png_path    <-            args[4]
        width       <- as.numeric(args[5])
        height      <- as.numeric(args[6])

        png(
            png_path,
            width=width,
            height=height,
            units="px"
        )

        par(
            cex=(width / 640),  # 1920 px wide => cex=3.0
            family="mono",
            col.lab='white',
            col.axis='white',
            fg='white',
            bg='black',
            mar=c(
                2.0,    # bottom
                2.0,    # left
                0.5,    # top
                0.5     # right
            )
        )

        epoch <- min(c(food$time, oven$time))
        now_t <- now - epoch

        food$time <- food$time - epoch
        oven$time <- oven$time - epoch

        recent <- food[food$time > (now_t - Model_Window_Size),]

        done <- data.frame()
        if (nrow(recent) >= 3) {
            # BUG/TODO: 2015-11-07T15:58 a linear model of meat temperature
            # rise is clearly wrong as it projects done times higher than the
            # oven model.
            #
            # Improvement (1) would be to correctly model this as logarithmic
            # rather than linear.
            #
            # Improvement (2) would be to model this logarithmically with
            # respect to oven temperature.
            #
            model <- lm(recent$temperature ~ recent$time)
            a <- model$coefficients[[2]]
            b <- model$coefficients[[1]]
            done <- data.frame(
              temperature=Targets,
              time=(Targets - b) / a  # (T = at + b) so (t = (T - b)/a)
            )
            done <- done[done$time > 0,]
            done <- done[done$time >= now_t,]
            done <- done[done$time < (now_t + Done_Future_Cutoff),]
        }

        temperature_range <- range(c(
            0,
            150,
            food$temperature,
            oven$temperature,
            done$temperature
        ))

        time_max <- max(c(
            0,
            300,
            food$time,
            oven$time,
            done$time  # TODO quantize to avoid xlim jitter as model improves
        ))

        plot(
            food$temperature ~ food$time,
            type="l",
            xlab='',
            ylab='',
            xlim=c(0, time_max),
            ylim=temperature_range,
            lwd=4,
            xaxt='n',
        )

        time_axis_units <- 60 * c(1, 5, 10, 15, 30)
        time_axis_by <- time_axis_units[time_max / time_axis_units <= 12][1]
        if (is.na(time_axis_by)) {
            # e.g. 40 hours cook => tick every 4 hours
            time_axis_by <- 3600 * ceiling((time_max / 12) / 3600)
        }
        time_axis_at <- seq(from=0, to=time_max, by=time_axis_by)
        time_axis_labels <- lapply(time_axis_at, function(t) {
            mm <- floor((t / 60) %% 60)
            hh <- floor(t / 3600)
            if (hh == 0) {
                return(sprintf('%dm', mm))
            } else {
                if (time_axis_by >= 3600) {
                    return(sprintf('%dh', hh))
                } else {
                    return(sprintf('%dh%02dm', hh, mm))
                }
            }
        })
        axis(1, at=time_axis_at, labels=time_axis_labels)

        points(
            oven$temperature ~ oven$time,
            type="l",
            lwd=4,
        )

        for (target in Targets) {
            abline(target, 0, lt=3, col=8)
            label <- paste(target, "\u00B0C", sep="")
            text(0, target, label, pos=4, col='gray')
        }

        if (exists("model")) {
            abline(model, lt=2, col='yellow')
        }

        if (exists("done") && nrow(done) > 0) {
            invisible(apply(done, 1, function(row) {
                target <- row[[1]]
                time   <- row[[2]]
                abline(v=time, lt=3, col=8)
                label <- strftime(
                    as.POSIXct(
                        epoch + time,
                        origin="1970-01-01"
                    ),
                    '%H:%M'
                )
                text(time, target, label, pos=2)
                points(time, target, type="p", lwd=4, col="red")
            }))
        }

        graphics.off()

    """

    def __init__(self, size):
        self.size = size
        self.food_table = self._tf('food', 'table')
        self.oven_table = self._tf('oven', 'table')

        self.r_script = scr = self._tf('script', 'R')
        scr.write(self.SCRIPT.encode('utf-8'))
        scr.flush()

    def _tf(self, prefix, suffix):
        return tempfile.NamedTemporaryFile(
            prefix=('bluetherm-plotter-' + prefix + '.'),
            suffix=('.' + suffix)
        )

    def plot(self, now, food_data, oven_data):
        self._write_data(self.food_table.name, food_data)
        self._write_data(self.oven_table.name, oven_data)
        png = self._tf('plot', 'png')
        (width, height) = self.size
        command = [
            'Rscript',
            self.r_script.name,
            now,
            self.food_table.name,
            self.oven_table.name,
            png.name,
            width,
            height,
        ]
        command = [str(c) for c in command]
        try:
            subprocess.check_call(command, timeout=5)
            return png
        except subprocess.CalledProcessError as ex:
            # The actual error will show up on STDERR
            return None

    def _write_data(self, path, data):
        f = open(path, 'w')
        f.write("time temperature\n")
        for row in data:
            f.write(' '.join([str(x) for x in row]))
            f.write("\n")
        f.close()


class Game_Color():
    black = (0x00, 0x00, 0x00)
    gray  = (0x80, 0x80, 0x80)
    white = (0xff, 0xff, 0xff)
    red   = (0xff, 0x00, 0x00)


class Game_Icon():
    def get():
        decoded = base64.b64decode(Game_Icon.data)
        f = io.BytesIO()
        f.write(decoded)
        f.seek(0)
        return f

    data = """
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
ferbOdejTBTWSeJqQMRyCbLJrYbXpPXFfkIUtq7tbpv1mLZqDG2mdOfA9aLv
AzNWq2Q+qYudcw1gorBOFE1IQTiuIynY4l/McV/hN6SRGqKY1osD1wvhVdPb
rFc+lk60c66vmSisd4nuIjXuHNruSSu5k6atlS6ZZvXjwPUIVtsCUDdj81zX
MlGcnyjuJwXgh68Q5dpbvPFh7PKUGqJweW+F8T2s+qHarHwgXmWiOD9RzKa5
ay+gbQaOaefNGhdNdFQY2XzUloPWKyn3vk0W98DK7J5rIhNF1STxW1P3btEc
5h7joVjulwgVeObRiP4YKo6i7s9y0HoENAK2etjsyzmBS3AmisqJ4n2SNHre
EFravnC4dxbwXevZZwmc9t3kVg5ar6az5021rqWw7wlajYmiYpK4HHCSZH5a
fIKgakzKOhCpqXoQ5eUV/gRYI3PA+sNDE230bJ6vJRNFxUTxCsnnYVRLUpB5
Oikbr/cj+zqK2MrpHLBeqjOnWO9MLsp+3O75FjFRVEwUa0kbS3vW00qifV71
9iWb1st+m7lDLlwM9bM+ij943u75YoAfMlGcSRLVaXMznqV7TnjtvUj08Kxw
I7ZhNQ5YL23xgKgtk3rf11Sc814mijOJ4iMnZ2bYMBNR1324eam9ZcfyKRys
XmcUw63bGpYMaajinM2ZKL4niWvMNMuis3Utkg1/OloiM+5N+YQsu23mir5Q
DDv9OhOy3TZEGs5E8T1RvEta60/vTQqw0sVjPH/BirrZK41idUfHQb4ZV/WY
PcA6UYxqpeKcK5goykniMsC3FAOYVP4Rku6gsOPD3u+WT+5miyhs2KsxVO4z
ff6x2xvPJ5goyomiPmmNOJTWgZnYskwPRd+6hfbManq9zIGqw3NcO9cLg6Gf
MlE0uGELzY5sFW1dP0gP12qSMEyTJjaGvB2eIsHVd7g9o4mC2iVa1OkxywNj
jZLo8QOO2/CrdnCucK2b05iDVJemsIPbrEu41W2g/zPTieJT0voQ1ukkg5dP
PtCjP2DNHGmScGPmCIOQGRYctbY1loipPG/3jCUK+PF/pY51S8fC1vcw41FR
0PwO712R3qlp2ebdwRIbQ5VxjcWyPBKKwvPOyGSiGEkriX7oS3ESpe5+Tjbh
0swRhnorvOShHSrPvT0jiQJ++H8C4pThK6mi4zTPhi5P6rGm3b9FmihcmznC
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
g8FwBP8f3Lln1HVKr48AAAAASUVORK5CYII=
"""


class Game_Sprite_WallClock(pygame.sprite.DirtySprite):
    def __init__(self, time_fn, font, format='%Y.%m.%d %H:%M:%S'):
        pygame.sprite.DirtySprite.__init__(self)

        self.time_fn = time_fn
        self.font = font
        self.format = format
        self.last = None

        dummy = self._text(time.strftime(format))
        self.image = pygame.Surface(dummy.get_rect().size)
        self.rect = self.image.get_rect()

    def update(self):
        now = self.time_fn()
        if now == self.last:
            return
        self.last = now
        text = self._text(time.strftime(self.format, time.localtime(now)))
        self.image.fill(Game_Color.black)
        self.image.blit(text, (0, 0))
        self.dirty = 1

    def _text(self, clock_string):
        return self.font.render(clock_string, 1, Game_Color.gray)


class Game_Sprite_TemperatureReading(pygame.sprite.DirtySprite):
    LABEL_MARGIN_RIGHT = 12
    UNSET = -300.0
    RATE = 20

    def __init__(self, font, label):
        pygame.sprite.DirtySprite.__init__(self)

        self.font = font
        self.label = label
        self.label_text = self.font.render(label, 1, Game_Color.gray)
        self.label_width = self.label_text.get_rect().width

        self.t0 = None
        self.t1 = None
        self.pp = 100
        self.is_first = True

        dummy_value_text = self._build_value_text(999.0, Game_Color.white)
        height = font.get_linesize() # Approx. ascent + descent + 1
        width = (
            self.label_width +
            dummy_value_text.get_rect().width +
            self.LABEL_MARGIN_RIGHT
        )

        self.image = pygame.Surface((width, height))
        self.rect = self.image.get_rect()
        self.set(None)

    def set(self, t):
        if self.t1 != t:
            self.t0 = self.t1
            self.t1 = t
            self.pp = 0

    def update(self):
        if self.is_first:
            self.is_first = False
        elif self.pp == 100:
            return

        self.image.fill(Game_Color.black)
        self.image.blit(self.label_text, (0, 0))

        self.pp = min(100, self.pp + self.RATE)
        if self.pp < 50:
            v = 100 - (2 * self.pp)
            t = self.t0
        else:
            v = (2 * self.pp) - 100
            t = self.t1
        color = [0xff * (v/100.0) for _ in range(3)]
        value_text = self._build_value_text(t, color)
        value_rect = value_text.get_rect()
        value_rect.left = self.label_width + self.LABEL_MARGIN_RIGHT
        self.image.blit(value_text, value_rect)
        self.dirty = 1

    def _build_value_text(self, t, color):
        if t is None:
            return self.font.render('.....', 1, color)
        else:
            t_str = str(round(float(t), 1)) + "\u00B0C"
            return self.font.render(t_str, 1, color)


class Game_Sprite_CountdownBar(pygame.sprite.DirtySprite):
    # TODO this should use the fake clock, not the pygame clock, and it should
    # also try to give you information about time since last reading seen
    #
    # For example see the log starting 2015-11-06 17:50
    TIMEOUT = 10000 # ms

    def __init__(self, time_fn, font, left_margin, width):
        pygame.sprite.DirtySprite.__init__(self)
        self.time_fn = time_fn
        self.font = font
        self.left_margin = left_margin
        self.width = width

        self.height = font.render("Ay", 1, Game_Color.gray).get_rect().height

        self.image = pygame.Surface((self.width, self.height))
        self.rect = self.image.get_rect()
        self.reset()

    def reset(self):
        self.image.fill(Game_Color.black)
        y = self.height // 2
        self.image.fill(Game_Color.gray, (0, y, self.width, 3))
        self.start = self.time_fn()
        self.last_dur_ms = None
        self.last_timer_str = None

    def update(self):
        dur_ms = 1000 * (self.time_fn() - self.start)
        dur_ms = 100 * (dur_ms // 100)
        if dur_ms == self.last_dur_ms:
            return
        self.last_dur_ms = dur_ms
        if dur_ms < self.TIMEOUT:
            w = self.rect.width
            bar = pygame.Rect(
                w - (w * dur_ms // self.TIMEOUT),
                0,
                w,
                self.rect.height
            )
            self.image.fill(Game_Color.black, bar)
        else:
            timer_str = self._pretty_duration(dur_ms) + ' since last reading'
            if timer_str != self.last_timer_str:
                self.last_timer_str = timer_str
                self.image.fill(Game_Color.black)
                text = self.font.render(timer_str, 1, Game_Color.red)
                self.image.blit(text, (self.left_margin, 0))
        self.dirty = 1

    def _pretty_duration(self, duration_in_milliseconds):
        dur_ms = duration_in_milliseconds
        dd = dur_ms // 86400000
        hh = (dur_ms // 3600000) % 24
        mm = (dur_ms // 60000  ) % 60
        ss = (dur_ms // 1000   ) % 60
        if dd > 0:
            return "%dd %2dh" % (dd, hh)
        elif hh > 0:
            return "%dh %2dm" % (hh, mm)
        elif mm > 0:
            return "%dm %2ds" % (mm, ss)
        else:
            return "%ds" % (ss)


class Game_Sprite_PlotPane(pygame.sprite.DirtySprite):
    def __init__(self, size):
        pygame.sprite.DirtySprite.__init__(self)
        self.image = pygame.Surface(size)
        self.rect = self.image.get_rect()

    def load(self, png_path):
        plot_image = pygame.image.load(png_path)
        self.image.blit(plot_image, (0, 0))
        self.dirty = 1


class Game_PlotWorker(threading.Thread):
    PLOTREADY = pygame.USEREVENT + 1

    def __init__(self, plotter):
        threading.Thread.__init__(self)
        self.plotter = plotter
        self.q = queue.Queue()

    def run(self):
        self.running = True
        while self.running:
            now = None
            while not self.q.empty():
                (now, food_data, oven_data) = self.q.get()
            if now is None:
                continue
            if len(food_data) + len(oven_data) == 0:
                continue
            png_tempfile = self.plotter.plot(now, food_data, oven_data)
            if png_tempfile is None:
                continue
            event = pygame.event.Event(
                self.PLOTREADY,
                png_tempfile=png_tempfile,  # pass to avoid garbage collection
                png_path=png_tempfile.name,
                now=now,
                food_data=food_data,
                oven_data=oven_data,
            )
            pygame.event.post(event)


parser = optparse.OptionParser()

parser.add_option(
    '--test',
    action='store_true',
    help="test mode, running with a mock data source",
)

parser.add_option(
    '--sqlite',
    type='string',
    default='/var/lib/heat-ledger/bluethermd.sqlite',
    help="path to your bluetherm daemon's sqlite database",
)

parser.add_option(
    '--start',
    type='string',
    default=None,
    help="fake clock time, when re-playing data",
)

parser.add_option(
    '--speedup',
    type='int',
    default=1,
    help="fake clock speed, when re-playing data",
)

(options, args) = parser.parse_args()

clock_start = None
if options.start:
    try:
        struct = time.strptime(options.start, '%Y-%m-%dT%H:%M:%S')
        clock_start = time.mktime(struct)
    except ValueError as ex:
        parser.error(ex)
clock = Data_Time(options.speedup, clock_start)

if options.test:
    data_source = Data_Temperatures_Mock(clock)
else:
    if not os.path.exists(options.sqlite):
        parser.error('sqlite database not found: ' + options.sqlite)
    data_source = Data_Temperatures_SQLite(clock, options.sqlite)
    if 'example' in options.sqlite and not options.start:
        clock.set_start(data_source.data_start_time())

data_buffer = Data_Buffer(data_source)


pygame.init()
pygame.display.init()
pygame.display.set_caption('Heat Ledger', 'Heat Ledger')

icon = pygame.image.load(Game_Icon.get(), 'meat.png')
pygame.display.set_icon(icon)

info = pygame.display.Info()
g_width, g_height = info.current_w, info.current_h

if sys.platform == 'darwin':
    scale = 0.95
    g_width  = int(scale * g_width)
    g_height = int(scale * g_height)

g_font_size = int(g_width / 36)

size = (g_width, g_height)

pygame.mouse.set_visible(False)

game_clock = pygame.time.Clock()

print('setting mode to {}...'.format(size))
screen = pygame.display.set_mode(size)
print('mode is set')

background = pygame.Surface(screen.get_size())
background = background.convert()
background.fill(Game_Color.black)

# The FreeType parts of pygame have better kerning, but have a bug whereby the
# baseline has jitter.
font_lg = pygame.font.SysFont('Eurostile', g_font_size)
font_sm = pygame.font.SysFont('Eurostile', g_font_size // 2)

wall_clock = Game_Sprite_WallClock(clock.time, font_lg)
wall_clock.rect.topleft = (10, 10)

food_temperature = Game_Sprite_TemperatureReading(font_lg, 'food')
food_temperature.rect.top = 10
food_temperature.rect.right = g_width - 10

oven_temperature = Game_Sprite_TemperatureReading(font_lg, 'oven')
oven_temperature.rect.top = 10
oven_temperature.rect.right = food_temperature.rect.left - 50

countdown_bar = Game_Sprite_CountdownBar(clock.time, font_sm, 20, g_width)
countdown_bar.rect.topleft = (0, wall_clock.rect.bottom + 10)

plot_pane = Game_Sprite_PlotPane((
    g_width - (10 * 2),
    g_height - countdown_bar.rect.bottom - 20
))
plot_pane.rect.top = countdown_bar.rect.bottom + 10
plot_pane.rect.left = 10

plotter = R_Plotter((plot_pane.rect.width, plot_pane.rect.height))

allsprites = pygame.sprite.LayeredDirty((
    wall_clock,
    food_temperature,
    oven_temperature,
    countdown_bar,
    plot_pane,
))
allsprites.clear(screen, background)

pw = Game_PlotWorker(plotter)
pw.start()

def quit():
    print('quitting...')
    pw.running = False
    pw.join()
    #pygame.quit()
    sys.exit()

def signal_handler(signal, frame):
    quit()

for sig in [signal.SIGINT, signal.SIGTERM]:
    signal.signal(sig, signal_handler)

is_run = True
while is_run:
    game_clock.tick(30)

    new = data_buffer.fetch()
    if new:
        # Defer updating food_temperature and oven_temperature until the
        # plot_pane is redrawn -- an expensive operation that makes makes
        # animations jerky!
        pw.q.put(new)

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            quit()
        elif event.type == Game_PlotWorker.PLOTREADY:
            plot_pane.load(event.png_path)
            if len(event.food_data) > 0:
                food_t = event.food_data[-1][1]
                food_temperature.set(food_t)
            if len(event.oven_data) > 0:
                oven_t = event.oven_data[-1][1]
                oven_temperature.set(oven_t)
            countdown_bar.reset()
        elif event.type == pygame.KEYDOWN:
            if event.key == pygame.K_ESCAPE:
                quit()

    allsprites.update()
    rects = allsprites.draw(screen)
    pygame.display.update(rects)

