#!/usr/bin/env python
#
# Oven => Sensor 1
# Food => Sensor 2
#

from __future__ import print_function

import atexit
import shutil
import sqlite3
import subprocess
import sys
import tempfile
import time

sqlite_path = "/var/lib/bluethermd/sqlite"
time_now = time.time()

GAP_BETWEEN_COOKS = 30 * 60

def select(time_now, sensor):
    start_time = time_now - 86400
    con = sqlite3.connect(sqlite_path)
    cur = con.cursor()
    template = (
        'SELECT epoch, mC FROM {} '
        'WHERE epoch >= {} AND epoch <= {} '
        'AND mC > -300000'
    )
    table = 'sensor_' + str(sensor)
    sql = template.format(table, start_time, time_now)
    cur.execute(sql)
    rows = cur.fetchall()
    con.close()
    return rows

def most_recent_session_time(oven, food):
    times = [v[0] for v in oven + food]
    epochs.sort()
    if len(epochs) <= 2:
        return None
    t0 = epochs[0]
    window_start = t0
    for t1 in epochs[1:]:
        gap = t1 - t0
        if gap > GAP_BETWEEN_COOKS:
            window_start = t1
        t0 = t1
    return window_start

def r_plot(time_origin, oven_table, food_table,
        png_path, width, height):
    command = [
        'Rscript', 'plot.R',
        time_origin, time_now,
        oven_table, food_table,
        png_path, width, height
    ]
    command = [str(c) for c in command]
    exit_status = subprocess.call(command)
    return(exit_status == 0)

def main():
    try:
        oven = select(time_now, 1)
        food = select(time_now, 2)
    except sqlite.OperationalError:
        return None

    time_origin = most_recent_session_epoch(oven, food)
    if time_origin == None:
        return None

    def filter(data):
        return [
            (v[0] - time_origin, v[1])
            for v in data if v[0] >= time_origin
        ]

    oven = filter(oven)
    food = filter(food)
    
    tmp = tempfile.mkdtemp()
    atexit.register(lambda: shutil.rmtree(tmp))

    def write_table(data):
        path = tempfile.mktemp(dir=tmp)
        f = open(path, 'w')
        f.write("time temperature\n")
        for row in data:
            f.write(' '.join([str(x) for x in row]))
            f.write("\n")
        f.close()
        return path
        
    oven_table = write_table(oven)
    food_table = write_table(food)
    png_path = tempfile.mktemp(suffix='.png', dir=tmp)

    r_plot(time_origin, oven_table, food_table, png_path, 1000, 1000)

main()
